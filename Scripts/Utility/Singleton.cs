using UnityEngine;

namespace UnityExamples
{
    public class Singleton<T> : MonoBehaviour where T : Component
    {
        protected static T instance;

        public static bool hasInstance => instance != null;
        public static T TryGetInstance() => hasInstance ? instance : null;

        public static T Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = FindAnyObjectByType<T>();

                    if (instance == null)
                    {
                        var go = new GameObject(typeof(T).Name + " AutoGenerated");
                        instance = go.AddComponent<T>();
                    }
                }
                return instance;
            }
        }

        /// <summary>
        /// Make sure to call base.Awake() in override if you need awake.
        /// </summary>
        protected virtual void Awake()
        {
            InitializeSingleton();
        }

        protected virtual void InitializeSingleton()
        {
            if (!Application.isPlaying) return;

            if (instance != null)
                Destroy(gameObject);

            instance = this as T;

            if (doNotDestroy)
                DontDestroyOnLoad(gameObject);
        }

        /// <summary>
        /// Override to true if you don't want this to be destroyed.
        /// </summary>
        protected virtual bool doNotDestroy => false;
    }
}
